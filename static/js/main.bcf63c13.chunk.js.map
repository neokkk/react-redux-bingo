{"version":3,"sources":["store/modules/bingo.js","components/BoardCell.js","components/Board.js","pages/App.js","serviceWorker.js","store/modules/index.js","index.js"],"names":["START_GAME","COUNT_PLAY","RESET","CLICK_CELL","END_GAME","endGame","player","type","initialState","isStarted","count","clickedCell","bingoPlayer","BoardCell","num","isClicked","dispatch","useDispatch","useSelector","state","bingo","className","onClick","e","c","Number","currentTarget","innerText","indexOf","cell","alert","bingoArr","Board","array","useState","clickedIndexArr","setClickedIndexArr","useEffect","length","forEach","v1","concat","findIndex","v2","map","filter","v","i","key","shuppleArr","arr","newArr","slice","randomIndex","Math","floor","random","tmp","App","Array","fill","bingoArr1","setBingoArr1","bingoArr2","setBingoArr2","Boolean","window","location","hostname","match","combineReducers","action","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcf63c13.chunk.js","sourcesContent":["/* 액션 생성 함수 */\r\nconst START_GAME = 'bingo/START_GAME';\r\nconst COUNT_PLAY = 'bingo/COUNT_PLAY';\r\nconst RESET = 'bingo/RESET';\r\nconst CLICK_CELL = 'bingo/CLICK_CELL';\r\nconst END_GAME = 'bingo/END_GAME'\r\n\r\n/* 액션 정의 */\r\nexport const startGame = () => ({ type: START_GAME });\r\nexport const countPlay = () => ({ type: COUNT_PLAY });\r\nexport const reset = () => ({ type: RESET })\r\nexport const clickCell = cell => ({ type: CLICK_CELL, cell });\r\nexport const endGame = player => ({ type: END_GAME, player });\r\n\r\n/* 초기 상태 설정 */\r\nconst initialState = {\r\n    isStarted: false,\r\n    count: 0,\r\n    clickedCell: [],\r\n    bingoPlayer: []\r\n}\r\n\r\n/* 리듀서 정의 */\r\nexport default function bingo(state = initialState, action) {\r\n    switch(action.type) {\r\n        case START_GAME:\r\n            return {\r\n                ...state,\r\n                isStarted: true\r\n            };\r\n        case COUNT_PLAY:\r\n            return {\r\n                ...state,\r\n                count: state.count + 1\r\n            }\r\n        case RESET:\r\n            return {\r\n                ...state,\r\n                count: 0,\r\n                clickedCell: []\r\n            }\r\n        case CLICK_CELL:\r\n            return {\r\n                ...state,\r\n                clickedCell: [...state.clickedCell, action.cell]\r\n            }\r\n        case END_GAME:\r\n            return {\r\n                ...state,\r\n                isStarted: false,\r\n                count: 0,\r\n                clickedCell: [],\r\n                bingoPlayer: action.player ? [...state.bingoPlayer, action.player] : []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './BoardCell.scss';\r\n\r\nimport { countPlay, clickCell } from '../store/modules/bingo';\r\n\r\nconst BoardCell = ({ num, player, isClicked }) => {\r\n    const dispatch = useDispatch();\r\n    const isStarted = useSelector(state => state.bingo.isStarted);\r\n    const count = useSelector(state => state.bingo.count);\r\n    const clickedCell = useSelector(state => state.bingo.clickedCell);\r\n\r\n    /* 숫자 클릭 */\r\n    const handleClick = e => {\r\n        if (isStarted) { // 게임 시작 누른 이후\r\n            const c = Number(e.currentTarget.innerText); // 클릭한 숫자\r\n\r\n            if (clickedCell.indexOf(c) < 0) { // 기존에 클릭한 숫자가 아닐 경우\r\n                if (count % 2 === player - 1) { // 본인 차례\r\n                    dispatch(countPlay()); // 플레이 카운트 + 1\r\n                    dispatch(clickCell(c)); // 클릭한 숫자 추가\r\n                } else {\r\n                    alert('잘못된 차례입니다.');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`BoardCell ${isClicked ? 'clicked' : null}`} onClick={handleClick}>\r\n            {isStarted && num}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardCell;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './Board.scss';\r\nimport BoardCell from './BoardCell';\r\n\r\nimport { endGame } from '../store/modules/bingo';\r\n\r\n/* 빙고 인덱스 배열 */\r\nconst bingoArr = [\r\n    [0, 1, 2, 3, 4],\r\n    [5, 6, 7, 8, 9],\r\n    [10, 11, 12, 13, 14],\r\n    [15, 16, 17, 18, 19],\r\n    [20, 21, 22, 23, 24],\r\n    [0, 5, 10, 15, 20],\r\n    [1, 6, 11, 16, 21],\r\n    [2, 7, 12, 17, 22],\r\n    [3, 8, 13, 18, 23],\r\n    [4, 9, 14, 19, 24],\r\n    [0, 6, 12, 18, 24],\r\n    [4, 8, 12, 16, 20]\r\n];\r\n\r\nconst Board = ({ array, player }) => {\r\n    const dispatch = useDispatch();\r\n    const clickedCell = useSelector(state => state.bingo.clickedCell);\r\n    const [clickedIndexArr, setClickedIndexArr] = useState([]); // 클릭한 숫자의 인덱스 담는 배열\r\n\r\n    useEffect(() => {\r\n        if (!clickedCell.length) { // 재시작하면 인덱스 배열 초기화\r\n            setClickedIndexArr([]);\r\n        }\r\n\r\n        clickedCell.forEach(v1 => {\r\n            setClickedIndexArr(clickedIndexArr.concat(array.findIndex(v2 => v2 === v1))); // 인덱스 추가\r\n        });\r\n    }, [clickedCell]);\r\n\r\n    /* 빙고 검증 */\r\n    if (clickedIndexArr.length > 4) { // 클릭한 수가 5개 이상일 때\r\n        bingoArr.forEach(v1 => {\r\n            const mapped = v1.map(v2 => { // 클릭한 수의 인덱스 배열이 빙고 배열과 일치할 경우\r\n                if (clickedIndexArr.indexOf(v2) >= 0) {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n            if (!mapped.filter(v => v !== 0).length) { // 빙고!\r\n                dispatch(endGame(player)); // 빙고를 외친 플레이어 추가\r\n                setClickedIndexArr([]); // 인덱스 배열 초기화\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='Board'>\r\n            <p>{player}P</p>\r\n            <div className='Board-cells'>\r\n                {array.map((v, i) =>\r\n                    <BoardCell key={i} num={v} player={player} isClicked={(clickedCell.length && (clickedCell.indexOf(v) >= 0)) ? true : false} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\nimport Board from '../components/Board';\n\nimport { startGame, reset, endGame } from '../store/modules/bingo';\n\n/* 배열 셔플 함수 */\nconst shuppleArr = arr => {\n  const newArr = arr.slice(); // 배열 복사\n\n  for (let i = 0; i < newArr.length; i++) {\n    const randomIndex = Math.floor(Math.random() * newArr.length);\n\n    // swap\n    let tmp = newArr[i];\n    newArr[i] = newArr[randomIndex];\n    newArr[randomIndex] = tmp;\n  }\n\n  return newArr;\n}\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isStarted = useSelector(state => state.bingo.isStarted);\n  const bingoPlayer = useSelector(state => state.bingo.bingoPlayer);\n  const count = useSelector(state => state.bingo.count);\n  const [bingoArr1, setBingoArr1] = useState(Array(25).fill(0).map((v, i) => i + 1)); // 랜덤 배열 1\n  const [bingoArr2, setBingoArr2] = useState(Array(25).fill(0).map((v, i) => i + 1)); // 랜덤 배열 2\n\n  /* 게임 시작 버튼 */\n  const handleGameStart = () => {\n    setBingoArr1(shuppleArr(bingoArr1));\n    setBingoArr2(shuppleArr(bingoArr2));\n\n    dispatch(reset()); // 시작 전 초기화\n    dispatch(startGame()); // 게임 시작\n  }\n\n  /* 무승부 검증 */\n  if (bingoPlayer.length === 2) {\n      alert('빙고! 무승부입니다.'); \n      dispatch(endGame()); // 초기화\n  } else if (bingoPlayer.length === 1) {\n      alert(`빙고! player${bingoPlayer[0]}의 승리입니다.`);\n      dispatch(endGame()); // 초기화\n  }\n\n  return (\n    <div className='App'>\n      <header>\n        <button onClick={handleGameStart}>{isStarted ? '게임 재시작' : '게임 시작'}</button>\n        <button>{isStarted && `player${count % 2 === 0 ? 1 : 2}의 차례입니다.`}</button>\n      </header>\n      <main>\n        <Board array={bingoArr1} player={1} />\n        <Board array={bingoArr2} player={2} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport bingo from './bingo';\r\n\r\nexport default combineReducers({\r\n    bingo\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from './store/modules';\n\n// redux 개발자 도구\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\nconst store = createStore(rootReducer, devTools);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}